//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// design the class in the most optimal way

class LRUCache
{
    private:

    public:
    
    struct Node{
        int key;
        int value;
        Node *prev;
        Node *next;
        Node(int k, int v){
            key = k;
            value = v;
            next = NULL;
            prev = NULL;
        }
    };
    
    void deletenode(Node *node){
        node -> prev -> next = node -> next;
        node -> next -> prev = node -> prev;
    }
    
    void addtohead(Node *node){
        node -> next = head -> next;
        node -> prev = head;
        head -> next -> prev = node;
        head -> next = node;
    }
    
    unordered_map <int, Node*> hm;
    
    int capacity;
    Node *head;
    Node *tail;
    //Constructor for initializing the cache capacity with the given value.
    LRUCache(int cap)
    {
        // code here
        capacity = cap;
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head -> next = tail;
        tail -> prev = head;
    }
    
    //Function to return value corresponding to the key.
    int get(int key)
    {
        // your code here
        if(hm.find(key) != hm.end()){
            deletenode(hm[key]);
            addtohead(hm[key]);
            return hm[key]->value;
        }
        else{
            return -1;
        }
    }
    
    //Function for storing key-value pair.
    void set(int key, int val)
    {
        // your code here   
        if(hm.find(key) != hm.end()){
            hm[key]->value = val;
            deletenode(hm[key]);
            addtohead(hm[key]);
        }
        else{
            Node *temp = new Node(key, val);
            
            if(hm.size() == capacity){
                hm.erase(tail->prev->key);
                deletenode(tail->prev);
                hm[key] = temp;
                addtohead(temp);
            }
            else{
                hm[key] = temp;
                addtohead(temp);
            }
        }
        
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin >> t;
    while (t--)
    {

        int capacity;
        cin >> capacity;
        LRUCache *cache = new LRUCache(capacity);
        
        int queries;
        cin >> queries;
        while (queries--)
        {
            string q;
            cin >> q;
            if (q == "SET")
            {
                int key;
                cin >> key;
                int value;
                cin >> value;
                cache->set(key, value);
            }
            else
            {
                int key;
                cin >> key;
                cout << cache->get(key) << " ";
            }
        }
        cout << endl;
    }
    return 0;
}

// } Driver Code Ends
